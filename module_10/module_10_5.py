# -*- coding: utf-8 -*-
"""module_10_5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VKrUUXUL-UooNSneGDLoG0K_jAfZSf2M
"""

#@title MAIN BLOCK
# Link https://drive.google.com/file/d/1YqBBelk2Pedfrg9GyXTGYvpa8Qb5CNd6/view?usp=sharing

!rm -rf ./*
!gdown 1YqBBelk2Pedfrg9GyXTGYvpa8Qb5CNd6
!unrar x Files.rar
import time
from multiprocessing import cpu_count
from multiprocessing.pool import Pool
from glob import glob

# класс таймер для удобной работы
class PerfTimer:
    """Class for measuring execution time of a code block.

    Attributes:
        _start (float): Timepoint when the timer started.
        _end (float): Timepoint when the timer stopped.
        elapsed_time (float): Time difference between stop and start.
    """
    def __init__(self) -> None:
        self._start = 0.0
        self._end = 0.0

    def start(self) -> None:
        """Start the timer, recording the current time as the start time."""
        self._start = time.perf_counter()
        self._end = self._start

    def stop(self) -> None:
        """Stop the timer, recording the current time as the end time."""
        self._end = time.perf_counter()

    @property
    def elapsed_time(self):
        """Calculate and return the time elapsed between the start and stop moments."""
        return self._end - self._start

def read_info(name: str) -> list:
    """Reads file line in to the list of strings"""
    out_list = []
    with open(name, 'r') as f:
        while line := f.readline():
            # rstrip for line cleaning optional
            out_list.append(line.rstrip())
    return out_list

p_timer = PerfTimer()

txt_files = glob("file*.txt")



if __name__ == "__main__":
    result = []
    p_timer.start()
    for f in txt_files:
        result.append(read_info(f))
    p_timer.stop()
    print(f"Работа линейного считывания закончилась за {p_timer.elapsed_time} c")
    with Pool(cpu_count()) as pool:
       p_timer.start()
       for result in pool.map(read_info, txt_files):
           # обработка результатов
           pass
       p_timer.stop()
       print(f"Работа пула процессов закончилась за {p_timer.elapsed_time} c (многопроцессный)")